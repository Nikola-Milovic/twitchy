// Code generated by MockGen. DO NOT EDIT.
// Source: ./account_client.go

// Package mock_client is a generated GoMock package.
package mock

import (
        reflect "reflect"

        gomock "github.com/golang/mock/gomock"
)

// MockRabbitClient is a mock of RabbitClient interface.
type MockRabbitClient struct {
        ctrl     *gomock.Controller
        recorder *MockRabbitClientMockRecorder
}

// MockRabbitClientMockRecorder is the mock recorder for MockRabbitClient.
type MockRabbitClientMockRecorder struct {
        mock *MockRabbitClient
}

// NewMockRabbitClient creates a new mock instance.
func NewMockRabbitClient(ctrl *gomock.Controller) *MockRabbitClient {
        mock := &MockRabbitClient{ctrl: ctrl}
        mock.recorder = &MockRabbitClientMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbitClient) EXPECT() *MockRabbitClientMockRecorder {
        return m.recorder
}

// Push mocks base method.
func (m *MockRabbitClient) Push(data []byte) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Push", data)
        ret0, _ := ret[0].(error)
        return ret0
}

// Push indicates an expected call of Push.
func (mr *MockRabbitClientMockRecorder) Push(data interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockRabbitClient)(nil).Push), data)
}